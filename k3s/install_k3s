#Set up load balancer node
sudo apt update && sudo apt install -y haproxy

# Configure haproxy
# Append the below lines to /etc/haproxy/haproxy.cfg

frontend kubernetes-frontend
    bind 172.16.16.100:6443
    mode tcp
    option tcplog
    default_backend kubernetes-backend

backend kubernetes-backend
    mode tcp
    option tcp-check
    balance roundrobin
    server kmaster1 172.16.16.101:6443 check fall 3 rise 2
    server kmaster2 172.16.16.102:6443 check fall 3 rise 2


sudo systemctl restart haproxy



# On all kubernetes nodes (kmaster1, kmaster2, kworker1)
ufw disable

#Disable swap
swapoff -a; sed -i '/swap/d' /etc/fstab

# Update sysctl settings for Kubernetes networking
cat >>/etc/sysctl.d/kubernetes.conf<<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF

#Install docker engine 
{
  apt install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
  add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
  apt update && apt install -y docker-ce=5:19.03.10~3-0~ubuntu-focal containerd.io
}

# Kubernetes Setup
# Add Apt repository

{
  curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
  echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list
}

# Install Kubernetes components
sudo apt update && sudo apt install -y kubeadm=1.19.2-00 kubelet=1.19.2-00 kubectl=1.19.2-00


# Initialize Kubernetes Cluster
sudo kubeadm init --control-plane-endpoint="192.168.56.100:6443" --upload-certs --apiserver-advertise-address=192.168.56.101 --pod-network-cidr=192.168.77.0/16


Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

You can now join any number of the control-plane node running the following command on each as root:

sudo kubeadm join 192.168.56.100:6443 --token n5gp41.lykfhacjzbowvbbp \
    --discovery-token-ca-cert-hash sha256:d4eab64bcd6c54c3db026bf73b1608ad22020fa57e4fb647667db171d3e61b6e \
    --control-plane --certificate-key cf944bf59b72208855f1716c1d636c2d5f3c593d62dbda4e2b5c54ba59867266

Please note that the certificate-key gives access to cluster sensitive data, keep it secret!
As a safeguard, uploaded-certs will be deleted in two hours; If necessary, you can use
"kubeadm init phase upload-certs --upload-certs" to reload certs afterward.

Then you can join any number of worker nodes by running the following on each as root:

sudo kubeadm join 192.168.56.100:6443 --token n5gp41.lykfhacjzbowvbbp \
    --discovery-token-ca-cert-hash sha256:d4eab64bcd6c54c3db026bf73b1608ad22020fa57e4fb647667db171d3e61b6e




b71f75320dc06a6c: name=node1 peerURLs=http://127.0.0.1:2380 clientURLs=http://127.0.0.1:2379 isLeader=true


